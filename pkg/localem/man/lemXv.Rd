% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lemXvFun.R
\name{lemXv}
\alias{lemXv}
\title{Computes the likelihood cross-validation}
\usage{
lemXv(cases, population, cellsCoarse, cellsFine, bw, xv = 4, lemObjects,
  ncores = 1, tol = 1e-06, maxIter = 2000, randomSeed = NULL,
  verbose = FALSE, path = getwd())
}
\arguments{
\item{cases, }{}

\item{population, }{}

\item{cellsCoarse, }{}

\item{cellsFine, }{}

\item{xv}{Number of cross-validation datasets}

\item{lemObjects}{List of arrays for the smoothing matrix, and raster stacks for the partition and smoothed offsets}

\item{ncores}{Number of cores/threads for parallel processing}

\item{tol}{Tolerance for convergence}

\item{maxIter}{Maximum number of iterations for convergence}

\item{randomSeed}{Seed for random number generator}

\item{verbose}{Verbose output}

\item{path}{folder for storing rasters}
}
\value{
The \code{lemXv} function returns a data frame of specified bandwidths and their cross-validation scores.
}
\description{
The \code{lemXv} function computes the likelihood cross-validation scores for the observed data with the input bandwidths used for the smoothing matrix. The cross-valiation test and training datasets of the observed cases are generated by k-fold sampling without replacement.
}
\details{
After using the \code{lemXv} function, the last entry of the data frame object is the theoretical cross-validation score when bandwidth is set to infinity.
}
\examples{
\dontrun{ 
data(kentuckyCounty)
data(kentuckyTract)

ncores = 1 + (.Platform$OS.type == 'unix')

lemRaster = rasterPartition(polyCoarse = kentuckyCounty, 
                           polyFine = kentuckyTract, 
                           cellsCoarse = 6, 
                           cellsFine = 100, 
                           bw = c(10, 12, 15, 17, 20, 25) * 1000, 
                           ncores = ncores, 
                           idFile = 'id.grd', 
                           offsetFile = 'offset.grd', 
                           verbose = TRUE)


lemSmoothMat = smoothingMatrix(rasterObjects = lemRaster, 
                               ncores = ncores, 
                               verbose = TRUE)

lemCv = lemXv(x = kentuckyCounty, 
             lemObjects = lemSmoothMat, 
             Nxv = 5, 
             ncores = ncores, 
             verbose = TRUE)
bestBw = lemCv$bw[which.min(lemCv$cv)]

plot(lemCv[is.finite(lemCv$bw),], 
    xlab = 'Bandwidth (m)', 
    ylab = 'CV', 
    log = 'x', col = 'red', type = 'o')
abline(v = bestBw, lty = 3)
}

Computes the likelihood cross-validation by removing spatial regions and estimating risk for those regions
This requires computations of new smoothing matrix for each training set
Sampling Ratio: 75/25\% of data for training and testing sets
}
